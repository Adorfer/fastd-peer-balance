#!/bin/bash
# sometime ago i wrote this script (i found it after writing this script)
# https://forum.freifunk.net/t/bessere-verteilung-von-knoten-clients-auf-sn-unter-fastd/12445

# this is reinvention ..
# but there are 2 things mixed together
# first check if we are inside our limits and (dis)allow connection, which is simple
# second rewriting this limits! which clearly should be done in an external cronjob, and NOT every onverify call - mainly the 2 bigger blocks from line 44 or so

# things to adjust to your server
fastdsocket="/var/run/fastd/fastd.sock"
fastdconf="/etc/fastd/sn4/main.conf"

# check if batctl is avail
# otherwise we could try to read from proc sys directly
# exit normaly which means verify true in fastd
# (even if we consider this a error)
[ -f /usr/local/sbin/batctl ] || exit

# check batman gw
# remember, no gateway result in error line - so this is everytime 1 or more
gwnr=$(batctl gwl -H |wc -l)

# we have to decide how we want to decide
# based on fastd_connections or based on wifi_users or just based on nodes/gw
## wifi count
## !!!! this script dont use it
# wifinr=$(batctl tg|grep -c ".W.")

## dirty count fastdconnections, 
## timeout means that connection on verify need 0.2 seconds, some consider this long!
timeout .2 ncat -U  $fastdsocket > /tmp/foo_$0
fastdnr=$(cat /tmp/foo_$0 |grep -o established|wc -l)

# we use batctl o , which is roughly the amount of nodes plus supernodes and some more interfaces of them 
# (basicly nodes + 4*supernodes .. more or less)
fairestimate=$(( $(batctl o|wc -l) / $gwnr ))

# get actual peer limit
actlimit=$(cat $fastdconf|grep -E "peer limit [0-9]+;")

# check if limit isnt too high at all, and lower it if needed
# but not lower than 50
if [ $actlimit -gt $fairestimate ]; then

    [ $fairestimate -le 50 ] && fairestimate=50

    sed -i s/"peer limit [0-9]*;"/"peer limit $fairestimate;"/ $fastdconf

    pkill -HUP -x fastd

    # dont allow connect at this point

    exit 1

fi

# we arrive here , fairestimate is greater than our limit, we may adjust this by 10
# todo - need a condition before doing this block and we need a "pufferzone"
sed -i s/"peer limit [0-9]*;"/"peer limit $(($actlimit + 10));"/ $fastdconf
# restart/ hup fastd
pkill -HUP -x fastd

# if inside our limits exit with 0 and allow connect
[ $actlimit -gt $fastdnr ] exit 0

# if outside our limits dont allow connect
[ $actlimit -le $fastdnr ] exit 1






# for following trash exit, or more politly - the security hints ;)
exit 99 


